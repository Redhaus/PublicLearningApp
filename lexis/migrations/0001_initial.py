# Generated by Django 3.1 on 2020-08-17 02:55

from django.db import migrations, models
import django.db.models.deletion
import lexis.models.blocks
import modelcluster.fields
import wagtail.core.fields
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lexis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('derivations', wagtail.core.fields.StreamField([('Derivations', lexis.models.blocks.Derivations())], blank=True, help_text='Enter any alternative derivations of the term', null=True)),
                ('lexis_root', wagtail.core.fields.StreamField([('Lexis_Root', lexis.models.blocks.LexisRoot())], blank=True, help_text='Enter any Latin or linguistic roots of the term', null=True)),
                ('highlight', wagtail.core.fields.StreamField([('Highlight', lexis.models.blocks.Highlight())], blank=True, help_text='Enter key points and take aways for the term', null=True)),
                ('application', wagtail.core.fields.StreamField([('Application', lexis.models.blocks.Application())], blank=True, help_text='Enter core applications students should be able to perform related to the term', null=True)),
                ('exploration', wagtail.core.fields.StreamField([('Exploration', lexis.models.blocks.Exploration())], blank=True, help_text='Enter ideas and concepts to explore related to the term', null=True)),
                ('term', models.CharField(blank=True, help_text='Enter the lexis term to be studied.', max_length=100, null=True)),
                ('part_of_speech', models.CharField(blank=True, choices=[('n.', 'noun'), ('adj.', 'adjective'), ('ad.', 'adverb'), ('v', 'verb'), ('tr. v.', 'transitive verb'), ('n. pl.', 'plural noun')], help_text='Select the part of speech for the term.', max_length=10, null=True)),
                ('etymology', wagtail.core.fields.RichTextField(blank=True, help_text='Enter the origin of the term and its historical development.', null=True)),
                ('quotation', models.TextField(blank=True, help_text='Enter a quote that utilizes the term.', null=True)),
                ('quotation_author', models.CharField(blank=True, help_text='Enter the author of the quote.', max_length=120, null=True)),
                ('quote_source', wagtail.core.fields.RichTextField(blank=True, help_text='Enter the citation for the source of this quotation.', null=True)),
                ('star_value', models.CharField(blank=True, choices=[('gold', 'Gold Star'), ('silver', 'Silver Star'), ('red', 'Red Star'), ('blue', 'Blue Star'), ('green', 'Green Star')], help_text='Enter the rating value of the term.', max_length=20, null=True)),
                ('event_collection', models.ForeignKey(blank=True, help_text='Enter the event collection this term belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='events.categoryeventcollection')),
            ],
            options={
                'verbose_name': 'Lexis',
                'verbose_name_plural': 'Lexis',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='LexisLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='lexis_link', to='lexis.lexis')),
                ('term_link', models.ForeignKey(help_text='Select any related lexis terms.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='term_linked', to='lexis.lexis')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LexisEventCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('event_link', models.ForeignKey(help_text='Select any related events.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='event_linked', to='events.categoryeventcollection')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_events', to='lexis.lexis')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IconList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('icons', models.CharField(blank=True, choices=[('device', 'device'), ('essential', 'essential'), ('common', 'common'), ('concept', 'concept'), ('person', 'person')], help_text='Select “device” if the term is a literary or rhetorical device. Select “essential” if the term is necessary knowledge. Select “common” if the term is common knowledge. Select “concept” if the term refers to an idea or historical event. Select “person” if the term refers to a historical or fictional person.', max_length=100, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='icon_list', to='lexis.lexis')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
