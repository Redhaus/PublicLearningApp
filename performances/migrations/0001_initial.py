# Generated by Django 3.1 on 2020-08-17 02:55

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.core.fields
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('events', '0001_initial'),
        ('lexis', '0001_initial'),
        ('wagtaildocs', '0010_document_file_hash'),
        ('continual_goals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Performances',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('performance_description', models.TextField(blank=True, help_text='Enter performance category type for this item.', null=True)),
                ('performance_title', models.CharField(blank=True, help_text='Enter performance category type for this item.', max_length=300, null=True)),
                ('performance_overview', wagtail.core.fields.RichTextField(blank=True, help_text='Enter a five-sentence overview of the performance.', null=True)),
                ('performance_assignment', models.TextField(blank=True, help_text='Enter a one sentence description that states how the learning outcome will be met in this performance.', null=True)),
                ('star_value', models.CharField(blank=True, choices=[('gold', 'Gold Star'), ('silver', 'Silver Star'), ('red', 'Red Star'), ('blue', 'Blue Star'), ('green', 'Green Star')], help_text='Enter the rating value of the performance.', max_length=20, null=True)),
                ('video_link', models.CharField(blank=True, help_text='Provide a link that demonstrates how to teach this performance.', max_length=500, null=True)),
                ('event_collection', models.ForeignKey(blank=True, help_text='Enter collection to which this performance belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='events.categoryeventcollection')),
                ('resource_link', models.ForeignKey(blank=True, help_text='Enter feats students should be able to perform.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
                ('student_sample', models.ForeignKey(blank=True, help_text='Upload samples of student work that successfully demonstrate this performance.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
            ],
            options={
                'verbose_name': 'Performance',
                'verbose_name_plural': 'Performances',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='PerformanceLexisLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_lexis_link', to='performances.performances')),
                ('term_link', models.ForeignKey(help_text='Enter any lexis terms connected to this performance.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='lexis.lexis')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PerformanceFeatsLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('performance_feats', models.CharField(blank=True, help_text='Enter the feat the student should be able to perform.', max_length=500, null=True)),
                ('continual_goal', models.ForeignKey(blank=True, help_text='Select the continual goal this feat achieves.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='continual_goals.continualgoals')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_feat_link', to='performances.performances')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
    ]
